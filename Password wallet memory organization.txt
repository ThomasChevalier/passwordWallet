=========================================
             PASSWORD WALLET             
           MEMORY ORGANIZATION           

By Thomas Chevalier (c) 2016
All rights reserved.
=========================================

	#################
	#  FRAM MEMORY  #
	#################

Total memory available
**********************

	Memory : 256 Kbit <=> 32 KByte = 32768 bytes

Memory representation
*********************

	|---------|----------------|-----------------|---------|-------------------|-----------|------|--------------|---------------|---------------|----------------|-----------------|-----------|----------|--------|----------|---------|----------|------------//----------|
	|         |                |                 |         |                   |           |      |              |               |               |                |                 |           |          |        |          |         |          |            //          |
	| Options | First Pwd Util | First Pwd Aplha | Num Pwd |    Oled Buffer    | Pool size |  IV  | Entropy Pool | Prev Pwd Util | Next Pwd Util | Prev Pwd Alpha | Next Pwd Alpha  | Pwd Count | Pwd Name | Pwd Iv | Password | User Iv | Username | Prev Pwd   // Username |
	|         |                |                 |         |                   |           |      |              |               |               |                |                 |           |          |        |          |         |          |            //          |
	|---------|----------------|-----------------|---------|-------------------|-----------|------|--------------|---------------|---------------|----------------|-----------------|-----------|----------|--------|----------|---------|----------|------------//----------|
	|    1    |        2       |        2        |    2    |       1024        |     2     |  16  |     1024     |       2       |       2       |       2        |        2        |     2     |    32    |   16   |    32    |   16    |    64    |     2      //    64    |
	0         1                3                 5         7                   1031        1033   1049           2073                                                                                                                               |            //          
    |                                                                                                            |                                          170                                                                                     |            //          

	Memory available for passwords : 32768 - 2073 = 30695 bytes
	A password block is 170 bytes.
	So the memory can store 180 passwords of 32 characters with a user name of 64 characters.

Description
***********
	
	Options
	-------
	These bytes described the users options and settings.
	*Byte 0*
	|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
	|      7      |      6      |      5      |      4      |      3      |      2      |      1      |      0      |
	|   Reserved  |   Reserved  |   Reserved  |   Reserved  | Orientation |   Sorting   |   Sorting   |No encryption|
	|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|

		*Bit 0
		No encryption : specify if the device must be encrypted (so if the user must authenticate).
		0 => false
		1 => true

		*Bit 1-2
		Sorting : specify the sorting algorithm.
		0 => no sorting (oldest first newest last)
		1 => sort by number of utilisation.
		2 => Alphabetical
		
		*Bit 3
		Orientation : last orientation of the device
		0 => normal
		1 => 180 rotation

		*Bit 4-7
		Reserved
	
	First Pwd
	---------
	The address of the first password when using the sorting method described in option.
	
	Num Pwd
	-------
	The number of password store in the memory. 

	Oled Buffer
	-----------
	256*128 byte buffer for the oled display.
	Each byte encode a column of eight pixels. LSB is higher pixel.
	First byte is top left, last byte is bottom right.

	Pool size
	---------
	Number of valid random byte in Entropy pool
	The MSB of Pool Size is a flag : if MSB = 1 Entropy Pool is encrypted else if MSB = 0 Entropy Pool is NOT encrypted

	Iv Entropy
	----------
	The initial vector (IV) required by AES to encrypt Entropy Pool.
	The IV must be randomy created each time the pool is reencrypted.

	Entropy Pool
	------------
	Array of random byte, used to generate password. Used byte must be written to 0.
	It is encrypted by the master key. The 1024 bytes are encrypted.

	Prev Pwd Util
	-------------
	Address of the previous password (e.g. the password who is more used than this one).
	A password address is the number of the password. For example address 54 is at byte 54*PasswordChunkSize+PasswordStartAddr. It point to the first byte of "Prev Pwd" field of the chunk.
	If the password are not sorted by use, the address must still be valid.

	Next Pwd Util
	-------------
	Address of the next password (e.g. the password which is less used than this one).
	A password address is the number of the password. For example address 54 is at byte 54*PasswordChunkSize+PasswordStartAddr. It point to the first byte of "Prev Pwd" field of the chunk.
	If the password are not sorted by use, the address must still be valid.

	Prev Pwd Alpha
	--------------
	Same as Prev Pwd Util but with alphabetical sort

	Next Pwd Alpha
	--------------
	Same as Next Pwd Util but with alphabetical sort


	Pwd Count
	---------
	The number of time the password has been used. Start from 0.
	It is very unlikely that a user use a password more than 2^16-1 times. If we take a user who use the password 10 times a day, he will overflow the counter in about 18 years ...
	
	
	Pwd Name
	--------
	The name of the password ("Zeste de savoir" for example). It's used to display the password on the screen and to sort by alphabet the passwords.

	Pwd Iv
	------
	The initial vector (IV) required by AES to encrypt "Password".
	The IV must be randomy created each time the password is reencrypted.

	Password
	--------
	The password. It is encrypted with aes 128 using the IV store in "Pwd IV". The key is the master key located on the rfid card.
	The password is long up to 32 characters (32 bytes is two blocks for aes 128).
	If the password is less than 32 characters long, then it is padded with this method :
		1- Append the number of padding byte (excluding this one)
		2- Add randomly generated padding bytes
	This method works because at most 30 bytes of padding will be added and the first 31 ascii charaters are unprintable (=> not used in a password).
	Example :
	Password = "Thomas Chevalier" = 0x54 0x68 0x6f 0x6d 0x61 0x73 0x20 0x43 0x68 0x65 0x76 0x61 0x6c 0x69 0x65 0x72
	lenght(Password) = 16
	15 random bytes must be added (+ 1 byte)
	Add a byte of value 15 (0x0F)
	Then add 15 random bytes (let say 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0F 0xAF 0x6C 0x23 0x8D)
	And the final result is : 
	0x54 0x68 0x6f 0x6d 0x61 0x73 0x20 0x43 0x68 0x65 0x76 0x61 0x6c 0x69 0x65 0x72 0x0F 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0F 0xAF 0x6C 0x23 0x8D
	|                                        TEXT                                  | nbr |                          Random padding                                 |

	To remove the padding, simply search the first value in the plain password less than 32 (0x20).

	User Iv
	-------
	Same as "Pwd Iv" but for "User"

	User
	----
	Same as "Password"
	
=========================================
	
	###################
	#  EEPROM MEMORY  #
	###################
	
	
Total memory available
**********************

	Memory : 1024 Bytes

Memory representation
*********************

	|------------------------
	|                       |
	| Encryption validation |
	|                       |
	|------------------------
	|    		16      |
	0                       16

Description
***********

	Decryption validation
	---------------------
	
	The result of the encryption of the following sequence by the Key.
	Sequence : 0x86, 0xd8 , 0x13 , 0xd3 , 0x2a , 0x25 , 0xc8 , 0x38 , 0x83 , 0xcd , 0xf9 , 0x02 , 0x5e , 0xd8 , 0x0e , 0x43
	If the sequence is encrypted with the right key, the result of the encryption and "Encryption validation" should match.
		
