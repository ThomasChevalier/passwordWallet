=========================================
             PASSWORD WALLET             
           MEMORY ORGANIZATION           

By Thomas Chevalier (c) 2017
All rights reserved.
=========================================

	#################
	#  FRAM MEMORY  #
	#################

Total memory available
**********************

	Memory SPI : 64 Kbit <=> 8 KByte = 8192 bytes
	Memory I2C : 256 Kbit <=> 32 KByte = 32768 bytes

Memory representation
*********************

	|---------|----------------|-----------------|---------|--------------|------------|----------------|---------------|---------------|----------------|-----------------|-----------|----------|--------|----------|---------|----------|------------//----------|
	|         |                |                 |         |              |            |                |               |               |                |                 |           |          |        |          |         |          |            //          |
	| Options | First Pwd Use  | First Pwd Aplha | Num Pwd | Entropy Pool | Memory Map | Backup section | Prev Pwd Use  | Next Pwd Use  | Prev Pwd Alpha | Next Pwd Alpha  | Pwd Count | Pwd Name | Pwd Iv | Password | User Iv | Username | Prev Pwd   // Username |
	|         |                |                 |         |              |            |                |               |               |                |                 |           |          |        |          |         |          |            //          |
	|---------|----------------|-----------------|---------|--------------|------------|----------------|---------------|---------------|----------------|-----------------|-----------|----------|--------|----------|---------|----------|------------//----------|
	|    1    |        1       |        1        |    1    |     256      |   6 or 25  |      168       |       1       |       1       |       1        |        1        |     2     |    32    |   16   |    32    |   16    |    64    |     1      //    64    |
	0         1                2                 3         4            260          266              434                                                                                                                                  |            //          |
    |                                                                                                   |                                                     166                                                                          |            //          |

         Memory              | SPI  |  I2C  |
    -----------------------------------------
    Memory available for pwd | 7760 | 32317 | bytes
    Maximum number of pwd    |  46  |  194  |

Description
***********
	
	Options
	-------
	These bytes described the users options and settings.
	*Byte 0*
	|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
	|      7      |      6      |      5      |      4      |      3      |      2      |      1      |      0      |
	|   Reserved  |   Reserved  |   Reserved  |    Qwerty   | Initialized | Orientation |   Sorting   |   Sorting   |
	|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
		*Bit 0-1
		Sorting : specify the sorting algorithm.
		0 => no sorting (oldest first newest last)
		1 => sort by number of Use.
		2 => Alphabetical
		
		*Bit 2
		Orientation : last orientation of the device
		0 => normal
		1 => 180 rotation

		*Bit 3
		Initialized : whether or not the device has been initialized
		0 => No
		1 => Yes
		*Bit 4
		Qwerty : store the current keyboard dispositon.
		0 => The device send keycode as an azerty keyboard
		1 => The device send keycode as a qwerty keyboard
		
		*Bit 5-7
		Reserved
	
	First Pwd
	---------
	The address of the first password when using the sorting method described in option.
	
	Num Pwd
	-------
	The number of password stored in the memory. 

                     # Oled Buffer
                     # -----------
    Not used anymore # 256*128 byte buffer for the oled display.
                     # Each byte encode a column of eight pixels. LSB is higher pixel.
                     # First byte is top left, last byte is bottom right.

	Entropy Pool
	------------
	Array of random byte, used to generate password. Used byte must be written to 0.

	Memory Map
	----------
	Each bit of the map represent one chunk of password. There is 180 password available so the map is 23 byte long (aka 184 bit).
	A bit set to 1 means that the chunk is used.
	A bit set to 0 means that the chunk is free.
	The first bit of the LSB is for the first chunk. This map should always be up to date.

	Backup section
	------------
	This section is used to make a temporary backup of a password chunk being updated. When a password is updated, a reset may occur.
	The password data must not in any case be lost, therefore a backup of the password chunk is made. When the password has been updated,
	the application copies the content of this section to the password chunk, then marks the operation as complete and erases this chunk.
	This section have the size as a password chunk plus two bytes, one for storing the id of the chunk stored and one for the status of the operation.
	It is constructed as the following : 
	|  STATUS |    ID    | PASSWORD CHUNK |
	|    1    |    1     |       166      |
	ADDR -                      ADDR +

	Status values :
		For now, see Globals.h
		
PASSWORD CHUNK

	Prev Pwd Use
	-------------
	Address of the previous password (e.g. the password who is more used than this one).
	A password address is the number of the password. For example address 54 is at byte 54*PasswordChunkSize+PasswordStartAddr. It point to the first byte of "Prev Pwd" field of the chunk.
	If the password are not sorted by use, the address must still be valid.

	Next Pwd Use
	-------------
	Address of the next password (e.g. the password which is less used than this one).
	A password address is the number of the password. For example address 54 is at byte 54*PasswordChunkSize+PasswordStartAddr. It point to the first byte of "Prev Pwd" field of the chunk.
	If the password are not sorted by use, the address must still be valid.

	Prev Pwd Alpha
	--------------
	Same as Prev Pwd Use but with alphabetical sort

	Next Pwd Alpha
	--------------
	Same as Next Pwd Use but with alphabetical sort


	Pwd Count
	---------
	The number of time the password has been used. Start from 0.
	It is very unlikely that a user use a password more than 2^16-1 times. If we take a user who use the password 10 times a day, he will overflow the counter in about 18 years ...
	
	
	Pwd Name
	--------
	The name of the password ("Zeste de savoir" for example). It's used to display the password on the screen and to sort by alphabet the passwords.

	Pwd Iv
	------
	The initial vector (IV) required by AES to encrypt "Password".
	The IV must be randomy created each time the password is reencrypted.

	Password
	--------
	The password. It is encrypted with aes 128 using the IV store in "Pwd IV". The key is the master key located on the rfid card.
	The password is long up to 32 characters (32 bytes is two blocks for aes 128).
	If the password is less than 32 characters long, then it is padded with 0.

	User Iv
	-------
	Same as "Pwd Iv" but for "User"

	User
	----
	Same as "Password"
	
=========================================
	
	###################
	#  EEPROM MEMORY  #
	###################
	
	
Total memory available
**********************

	Memory : 1024 Bytes

Memory representation
*********************

	|---------------------------|-----------------------|-----------------|-----------------------|-----------------------|
	|                           |                       |                 |                       |                       |
	|      Random sequence      | Encryption validation |  rfid_firmware  | qwerty_to_keycode_map | azerty_to_keycode_map |
	|                           |                       |                 |                       |                       |
	|---------------------------|-----------------------|-----------------|-----------------------|-----------------------|
	|            16             |          16           |        64       |           96          |           96          |
	0                           16                      32                96                      192                     288

Description
***********
	
	Random sequence
	---------------
	A random sequence, regenerated when the master key is changed.

	Encryption validation
	---------------------
	
	The result of the encryption of the sequence "Random sequence" by the Key.
	If the sequence is encrypted with the right key, the result of the encryption and "Encryption validation" should match.