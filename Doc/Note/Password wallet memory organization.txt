=========================================
             PASSWORD WALLET             
           MEMORY ORGANIZATION           

By Thomas Chevalier (c) 2017
All rights reserved.
=========================================

	#################
	#  FRAM MEMORY  #
	#################

Total memory available
**********************

	Memory : 64 Kbit <=> 8 KByte = 8192 bytes

Memory representation
*********************

	|---------|----------------|-----------------|---------|-----------|--------------|------------|---------------|---------------|----------------|-----------------|-----------|----------|--------|----------|---------|----------|------------//----------|
	|         |                |                 |         |           |              |            |               |               |                |                 |           |          |        |          |         |          |            //          |
	| Options | First Pwd Util | First Pwd Aplha | Num Pwd | Pool size | Entropy Pool | Memory Map | Prev Pwd Util | Next Pwd Util | Prev Pwd Alpha | Next Pwd Alpha  | Pwd Count | Pwd Name | Pwd Iv | Password | User Iv | Username | Prev Pwd   // Username |
	|         |                |                 |         |           |              |            |               |               |                |                 |           |          |        |          |         |          |            //          |
	|---------|----------------|-----------------|---------|-----------|--------------|------------|---------------|---------------|----------------|-----------------|-----------|----------|--------|----------|---------|----------|------------//----------|
	|    1    |        1       |        1        |    1    |     2     |     256      |     6      |       1       |       1       |       1        |        1        |     2     |    32    |   16   |    32    |   16    |    64    |     1      //    64    |
	0         1                2                 3         4           6            262          268                                                                                                                                  |            //          
    |                                                                                              |                                                     166                                                                          |            //          

	Memory available for passwords : 8192 - 285 = 7907 bytes
	A password block is 166 bytes.
	So the memory can store 47 passwords of 32 characters with a user name of 64 characters.

Description
***********
	
	Options
	-------
	These bytes described the users options and settings.
	*Byte 0*
	|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
	|      7      |      6      |      5      |      4      |      3      |      2      |      1      |      0      |
	|   Reserved  |   Reserved  |    Qwerty   | Initialized | Orientation |   Sorting   |   Sorting   |No encryption|
	|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|

		*Bit 0
		No encryption : specify if the device must be encrypted (so if the user must authenticate).
		0 => false
		1 => true

		*Bit 1-2
		Sorting : specify the sorting algorithm.
		0 => no sorting (oldest first newest last)
		1 => sort by number of utilisation.
		2 => Alphabetical
		
		*Bit 3
		Orientation : last orientation of the device
		0 => normal
		1 => 180 rotation

		*Bit 4
		Initialized : whether or not the device has been initialized
		0 => No
		1 => Yes
		*Bit 5
		Qwerty : store the current keyboard dispositon.
		0 => The device send keycode as an azerty keyboard
		1 => The device send keycode as a qwerty keyboard
		
		*Bit 6-7
		Reserved
	
	First Pwd
	---------
	The address of the first password when using the sorting method described in option.
	
	Num Pwd
	-------
	The number of password stored in the memory. 

                     # Oled Buffer
                     # -----------
    Not used anymore # 256*128 byte buffer for the oled display.
                     # Each byte encode a column of eight pixels. LSB is higher pixel.
                     # First byte is top left, last byte is bottom right.

	Pool size
	---------
	Number of valid random byte in Entropy pool
	The MSB of Pool Size is a flag : if MSB = 1 Entropy Pool is encrypted else if MSB = 0 Entropy Pool is NOT encrypted

	Entropy Pool
	------------
	Array of random byte, used to generate password. Used byte must be written to 0.

	Memory Map
	----------
	Each bit of the map represent one chunk of password. There is 180 password available so the map is 23 byte long (aka 184 bit).
	A bit set to 1 means that the chunk is used.
	A bit set to 0 means that the chunk is free.
	The first bit of the LSB is for the first chunk. This map should always be up to date.

	Prev Pwd Util
	-------------
	Address of the previous password (e.g. the password who is more used than this one).
	A password address is the number of the password. For example address 54 is at byte 54*PasswordChunkSize+PasswordStartAddr. It point to the first byte of "Prev Pwd" field of the chunk.
	If the password are not sorted by use, the address must still be valid.

	Next Pwd Util
	-------------
	Address of the next password (e.g. the password which is less used than this one).
	A password address is the number of the password. For example address 54 is at byte 54*PasswordChunkSize+PasswordStartAddr. It point to the first byte of "Prev Pwd" field of the chunk.
	If the password are not sorted by use, the address must still be valid.

	Prev Pwd Alpha
	--------------
	Same as Prev Pwd Util but with alphabetical sort

	Next Pwd Alpha
	--------------
	Same as Next Pwd Util but with alphabetical sort


	Pwd Count
	---------
	The number of time the password has been used. Start from 0.
	It is very unlikely that a user use a password more than 2^16-1 times. If we take a user who use the password 10 times a day, he will overflow the counter in about 18 years ...
	
	
	Pwd Name
	--------
	The name of the password ("Zeste de savoir" for example). It's used to display the password on the screen and to sort by alphabet the passwords.

	Pwd Iv
	------
	The initial vector (IV) required by AES to encrypt "Password".
	The IV must be randomy created each time the password is reencrypted.

	Password
	--------
	The password. It is encrypted with aes 128 using the IV store in "Pwd IV". The key is the master key located on the rfid card.
	The password is long up to 32 characters (32 bytes is two blocks for aes 128).
	If the password is less than 32 characters long, then it is padded with this method :
		1- Append a byte with a value less or equal to 31
		2- Add randomly generated padding bytes
	This method works because the first 31 ascii charaters are unprintable (=> not used in a password).
	Example :
	Password = "Thomas Chevalier" = 0x54 0x68 0x6f 0x6d 0x61 0x73 0x20 0x43 0x68 0x65 0x76 0x61 0x6c 0x69 0x65 0x72
	lenght(Password) = 16
	15 random bytes must be added (+ 1 byte less than 32)
	Add a byte of random value less than 32 (let say 0x0F)
	Then add 15 random bytes (let say 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0F 0xAF 0x6C 0x23 0x8D)
	And the final result is : 
	0x54 0x68 0x6f 0x6d 0x61 0x73 0x20 0x43 0x68 0x65 0x76 0x61 0x6c 0x69 0x65 0x72 0x0F 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0F 0xAF 0x6C 0x23 0x8D
	|                                        TEXT                                  | beg |                          Random padding                                 |

	To remove the padding, simply search the first value in the plain password less than 32 (0x20).

	User Iv
	-------
	Same as "Pwd Iv" but for "User"

	User
	----
	Same as "Password"
	
=========================================
	
	###################
	#  EEPROM MEMORY  #
	###################
	
	
Total memory available
**********************

	Memory : 1024 Bytes

Memory representation
*********************

	|---------------------------|-----------------------|-------------------------------|
	|                           |                       |                               |
	|      Random sequence      | Encryption validation |             KEY               |
	|                           |                       |                               |
	|---------------------------|-------------------------------------------------------|
	|            16             |          16           |             16                |
	0                           16                      32                              48

Description
***********
	
	Random sequence
	---------------
	A random sequence, regenerated when the master key is changed.

	Encryption validation
	---------------------
	
	The result of the encryption of the sequence "Random sequence" by the Key.
	If the sequence is encrypted with the right key, the result of the encryption and "Encryption validation" should match.

	KEY
	---

	If the user choose to not use encryption the device store the current key in eeprom.
	Key is filled with zero if user want to use encryption again.
		
